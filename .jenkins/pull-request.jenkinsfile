pipeline {
    agent {
        docker {
            image 'node:18-alpine'
            reuseNode true
        }
    }

    triggers {
        bitBucketTrigger(triggers: [
                [$class: 'BitBucketPPRPullRequestTriggerFilter', actionFilter: [$class: 'BitBucketPPRPullRequestCreatedActionFilter']],
                [$class: 'BitBucketPPRPullRequestTriggerFilter', actionFilter: [$class: 'BitBucketPPRPullRequestUpdatedActionFilter']],
                [$class: 'BitBucketPPRPullRequestTriggerFilter', actionFilter: [$class: 'BitBucketPPRPullRequestMergedActionFilter']]
        ])
    }

    stages {
        stage('Test') {
            steps {
                withCredentials([file(credentialsId: 'JENKINS_GCP_SA', variable: 'SA_KEY')]) {
                    sh '''
                    export GOOGLE_APPLICATION_CREDENTIALS="${SA_KEY}"
                    npx google-artifactregistry-auth --repo-config=./.npmrc --credential-config=./.npmrc
                    npm ci
                    npm test
                  '''
                }

            }
        }

        stage('Run code analysis') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'JENKINS_GCP_SA', variable: 'SA_KEY')]) {
                        withSonarQubeEnv('sonarcloud') {
                            sh 'npx sonarqube-scanner'
                        }
                    }
                }
            }
        }
    }
}
